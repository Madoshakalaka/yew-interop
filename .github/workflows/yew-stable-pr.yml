name: Checks and Builds with Yew's 0.19

on:
  pull_request:
    branches: [ master ]
    paths:
      - '.github/workflows/yew-stable-pr.yml'
      - 'dev-tool/**'
      - 'example/**'
      - 'yew-interop/**'
      - 'yew-interop-core/**'
      - 'yew-interop-macro/**'
  push:
    branches: [ master ]
    paths:
      - '.github/workflows/yew-stable-pr.yml'
      - 'dev-tool/**'
      - 'example/**'
      - 'yew-interop/**'
      - 'yew-interop-core/**'
      - 'yew-interop-macro/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  test-yew-interop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Run tests
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p yew-interop --features yew-stable

  test-yew-interop-script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Run tests
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p yew-interop --features yew-stable --features script

  clippy-yew-interop-macro:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Run clippy
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -p yew-interop-macro --features yew-stable -- -D warnings
  test-yew-interop-macro-script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            yew-interop-macro:
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Run tests
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p yew-interop-macro --features yew-next --features script
  clippy-yew-interop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'


      - name: Run clippy
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -p yew-interop --features yew-stable --all-targets -- -D warnings


  clippy-yew-interop-script:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'


      - name: Run clippy
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -p yew-interop --features yew-stable --features script --all-targets -- -D warnings

  test-all:
    name: Test at Workspace Root
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v1



      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test



  clippy-all:
    name: Clippy at Workspace Root
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v1



      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- -D warnings


  clippy-example:
    name: Clippy on the Example Crate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'example/**'
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'

      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'


      - name: Run clippy
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -p example --all-targets -- -D warnings




  test-example:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'example/**'
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Run tests
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p example

  build-example:
    if: github.author != 'dependabot[bot]'
    needs: [test-all, clippy-all, test-yew-interop,test-yew-interop-script , clippy-yew-interop, clippy-yew-interop-script, test-yew-interop-macro-script, clippy-yew-interop-macro, test-example, clippy-example]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'example/**'
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - uses: jetli/trunk-action@v0.1.0
        if: steps.changes.outputs.dependencies == 'true'
        with:
          version: 'latest'
      - name: Build the Website
        if: steps.changes.outputs.dependencies == 'true'
        env:
          YEW_INTEROP_DEMO_VERSION: master
        run: trunk build --release --dist docs/master --public-url /yew-interop/master example/index.html
      - run: git pull
        if: steps.changes.outputs.dependencies == 'true'
      - name: Commit Website
        if: steps.changes.outputs.dependencies == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ¤– build demo website"
  build-docs:
    if: github.author != 'dependabot[bot]'
    needs: build-example
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'yew-interop/**'
              - 'yew-interop-macro/**'
              - 'yew-interop-core/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: nightly
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Build the Docs
        if: steps.changes.outputs.dependencies == 'true'
        env:
          RUSTDOCFLAGS: --cfg documenting
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: -p yew-interop --features yew-stable --features script --no-deps
      - run: git pull
        if: steps.changes.outputs.dependencies == 'true'
      - name: Clean Old Docs
        if: steps.changes.outputs.dependencies == 'true'
        run: rm -rf docs/docsrs/
      - name: Transfer Docs Built
        if: steps.changes.outputs.dependencies == 'true'
        run: mv target/doc docs/docsrs
      - name: Commit Website
        if: steps.changes.outputs.dependencies == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ¤– build master docs"
  clippy-dev-tool:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'dev-tool/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Run Clippy
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -p dev-tool --all-targets -- -D warnings

  test-dev-tool:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'dev-tool/**'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: stable
          override: true
          profile: minimal

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - name: Run tests
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p dev-tool
  generate-readme:
    if: github.author != 'dependabot[bot]'
    needs: [clippy-dev-tool, test-dev-tool, build-docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - 'dev-tool/**'
              - 'yew-interop/src/lib.rs'
      - uses: actions-rs/toolchain@v1
        if: steps.changes.outputs.dependencies == 'true'
        with:
          toolchain: nightly
          override: true
          profile: minimal
          components: rustfmt

      - uses: Swatinem/rust-cache@v1
        if: steps.changes.outputs.dependencies == 'true'

      - uses: jetli/trunk-action@v0.1.0
        if: steps.changes.outputs.dependencies == 'true'
        with:
          version: 'latest'
      - name: Build the Binary
        if: steps.changes.outputs.dependencies == 'true'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p dev-tool --bin readme-gen --out-dir dev-tool/ci-bin -Z unstable-options
      - name: Generate the Readme
        if: steps.changes.outputs.dependencies == 'true'
        run: ./dev-tool/ci-bin/readme-gen
      - run: git pull
        if: steps.changes.outputs.dependencies == 'true'
      - name: Commit the Binary
        if: steps.changes.outputs.dependencies == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "ðŸ¤– build readme gen"
